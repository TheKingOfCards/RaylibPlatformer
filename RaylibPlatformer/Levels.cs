using System;
using Raylib_cs;
using System.Numerics;

//Göra en lista där alla listor ska vara
//Bygga upp alla levels med hjälp av 2D int arrays
//Göra en for loop som är i en annan for loop som ska gå igenom och kolla vilket värde den har beroende på koordenat
//Skapa en ny entity beroende på vilket värde den har

public class Levels
{
    public int currentLevel = 0;
    Manager m;
    List<int[,]> allLevels = new();
    public Levels(Manager m)
    {
        this.m = m;

        allLevels.Add(level1);
        allLevels.Add(level2);
        allLevels.Add(level3);
        allLevels.Add(level4);
    }


    
    //Level 1
    public int[,] level1 = 
    {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
     {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     {1,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,1},
     {1,1,1,1,1,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1},};

    public int[,] level2 = 
    {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
     {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     {1,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     {1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1},
     {1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1},
     {1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1},
     {1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1},
     {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,1},
     {1,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1},};
    
    public int[,] level3 = 
    {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
     {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1},
     {1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1},
     {1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1},
     {1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1},
     {1,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,2,2,1},
     {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
     {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,1},
     {1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},};

    public int[,] level4 = 
    {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0},
     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
     {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},};


    int[,] currentLoadingLevel;
    public void BuildLevel()
    {
        currentLoadingLevel = allLevels[currentLevel];
        for (int y = 0; y < currentLoadingLevel.GetLength(0); y++)
        {
            for (var x = 0; x < currentLoadingLevel.GetLength(1); x++)
            {
                if(currentLoadingLevel[y,x] == 1) //Places normal tiles
                {
                    m.tiles.Add(new NormalTiles(x, y).rect);
                }else if(currentLoadingLevel[y,x] == 2) //Places death tiles
                {
                    m.noNoTiles.Add(new DeathTiles(x, y).rect);
                }else if(currentLoadingLevel[y,x] == 3) //Places player
                {
                    m.player = new Player(m,x,y); 
                    m.player.PlacesChecks();
                }else if(currentLoadingLevel[y,x] == 4)
                {
                    m.goal = new Goal(x, y).rect;
                }
            }
        }
    }
}